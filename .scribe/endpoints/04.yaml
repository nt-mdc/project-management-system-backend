name: 'Task Comments'
description: |-

  APIs for managing comments on tasks within projects.
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/v1/projects/{project_id}/tasks/{task_id}/comments'
    metadata:
      groupName: 'Task Comments'
      groupDescription: |-

        APIs for managing comments on tasks within projects.
      subgroup: ''
      subgroupDescription: ''
      title: 'Shows all comments for a task'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      project_id:
        name: project_id
        description: 'The ID of the project.'
        required: true
        example: numquam
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: blanditiis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      project:
        name: project
        description: 'The ID of the project.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      project_id: numquam
      task_id: blanditiis
      project: 1
      task: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            {
              "id": 1,
              "user_id": 1,
              "task_id": 1,
              "content": "Comment content",
              "created_at": "2024-08-24T14:34:56.000000Z",
              "updated_at": "2024-08-24T14:34:56.000000Z",
              "user": {
                  "id": 78,
                  "name": "User test",
                  "email": "testuser@email.com",
                  "created_at": "2024-08-24T13:50:23.000000Z",
                  "updated_at": "2024-08-24T13:50:23.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This project does not exist"
          }
        headers: []
        description: 'Project not found'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This task does not exist"
          }
        headers: []
        description: 'Task not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer ah8E1b6kZgceDv364Pd5Vaf'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/projects/{project_id}/tasks/{task_id}/comments'
    metadata:
      groupName: 'Task Comments'
      groupDescription: |-

        APIs for managing comments on tasks within projects.
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a comment for a task'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      project_id:
        name: project_id
        description: 'The ID of the project.'
        required: true
        example: debitis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: sint
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      project:
        name: project
        description: 'The ID of the project.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      project_id: debitis
      task_id: sint
      project: 1
      task: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      content:
        name: content
        description: 'The content of the comment, must be a minimum of 5 characters and a maximum of 1,500 characters.'
        required: true
        example: nemo
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      content: nemo
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
                "content": "Comment content",
                "task_id": 42,
                "user_id": 78,
                "updated_at": "2024-08-24T14:34:56.000000Z",
                "created_at": "2024-08-24T14:34:56.000000Z",
                "id": 5
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This project does not exist"
          }
        headers: []
        description: 'Project not found'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This task does not exist"
          }
        headers: []
        description: 'Task not found'
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The content field is required.",
            "errors": {
                "content": [
                    "The content field is required."
                ]
            }
          }
        headers: []
        description: 'Missing content field'
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The content field must be at least 5 characters.",
            "errors": {
                "content": [
                    "The content field must be at least 5 characters."
                ]
            }
          }
        headers: []
        description: 'Content field with fewer characters than the minimum'
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The content field must not be greater than 1500 characters.",
            "errors": {
                "content": [
                    "The content field must not be greater than 1500 characters."
                ]
            }
          }
        headers: []
        description: 'Content field with more characters than the maximum'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3g66f4cbkdPZhV18v5aaeDE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/projects/{project_id}/tasks/{task_id}/comments/{id}'
    metadata:
      groupName: 'Task Comments'
      groupDescription: |-

        APIs for managing comments on tasks within projects.
      subgroup: ''
      subgroupDescription: ''
      title: 'Show a specific comment in the task'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      project_id:
        name: project_id
        description: 'The ID of the project.'
        required: true
        example: sapiente
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: consequuntur
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      id:
        name: id
        description: 'The ID of the comment.'
        required: true
        example: unde
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      project:
        name: project
        description: 'The ID of the project.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      comment:
        name: comment
        description: 'The ID of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      project_id: sapiente
      task_id: consequuntur
      id: unde
      project: 1
      task: 1
      comment: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 5,
            "user_id": 78,
            "task_id": 42,
            "content": "Comment content",
            "created_at": "2024-08-24T14:34:56.000000Z",
            "updated_at": "2024-08-24T14:34:56.000000Z"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This project does not exist"
          }
        headers: []
        description: 'Project not found'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This task does not exist"
          }
        headers: []
        description: 'Task not found'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This comment does not exist"
          }
        headers: []
        description: 'Comment not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6E156ckDPegfa4ba8d3ZvVh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/projects/{project_id}/tasks/{task_id}/comments/{id}'
    metadata:
      groupName: 'Task Comments'
      groupDescription: |-

        APIs for managing comments on tasks within projects.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a comment'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      project_id:
        name: project_id
        description: 'The ID of the project.'
        required: true
        example: non
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: quis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      id:
        name: id
        description: 'The ID of the comment.'
        required: true
        example: et
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      project:
        name: project
        description: 'The ID of the project.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      comment:
        name: comment
        description: 'The ID of the comment.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      project_id: non
      task_id: quis
      id: et
      project: 1
      task: 1
      comment: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: ''
        headers: []
        description: 'No content'
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "This comment does not belong to you"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This project does not exist"
          }
        headers: []
        description: 'Project not found'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This task does not exist"
          }
        headers: []
        description: 'Task not found'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "This comment does not exist"
          }
        headers: []
        description: 'Comment not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4fd631ZD5aEv8bhac6VgkeP'
    controller: null
    method: null
    route: null
    custom: []
